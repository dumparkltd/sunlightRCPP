// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// get_altitude_distance_for_azimuth_cpp
NumericMatrix get_altitude_distance_for_azimuth_cpp(NumericMatrix& dem, double azimuth, double gridConvergence, double resolution, bool correctCurvature);
RcppExport SEXP _sunlightRCPP_get_altitude_distance_for_azimuth_cpp(SEXP demSEXP, SEXP azimuthSEXP, SEXP gridConvergenceSEXP, SEXP resolutionSEXP, SEXP correctCurvatureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type dem(demSEXP);
    Rcpp::traits::input_parameter< double >::type azimuth(azimuthSEXP);
    Rcpp::traits::input_parameter< double >::type gridConvergence(gridConvergenceSEXP);
    Rcpp::traits::input_parameter< double >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< bool >::type correctCurvature(correctCurvatureSEXP);
    rcpp_result_gen = Rcpp::wrap(get_altitude_distance_for_azimuth_cpp(dem, azimuth, gridConvergence, resolution, correctCurvature));
    return rcpp_result_gen;
END_RCPP
}
// get_altitudes_for_azimuth_cpp
NumericMatrix get_altitudes_for_azimuth_cpp(NumericMatrix& dem, double azimuth, double gridConvergence, double resolution, bool correctCurvature);
RcppExport SEXP _sunlightRCPP_get_altitudes_for_azimuth_cpp(SEXP demSEXP, SEXP azimuthSEXP, SEXP gridConvergenceSEXP, SEXP resolutionSEXP, SEXP correctCurvatureSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type dem(demSEXP);
    Rcpp::traits::input_parameter< double >::type azimuth(azimuthSEXP);
    Rcpp::traits::input_parameter< double >::type gridConvergence(gridConvergenceSEXP);
    Rcpp::traits::input_parameter< double >::type resolution(resolutionSEXP);
    Rcpp::traits::input_parameter< bool >::type correctCurvature(correctCurvatureSEXP);
    rcpp_result_gen = Rcpp::wrap(get_altitudes_for_azimuth_cpp(dem, azimuth, gridConvergence, resolution, correctCurvature));
    return rcpp_result_gen;
END_RCPP
}
// get_dxdy_for_azimuth_cpp
NumericVector get_dxdy_for_azimuth_cpp(NumericMatrix& dem, double azimuth, double resolution);
RcppExport SEXP _sunlightRCPP_get_dxdy_for_azimuth_cpp(SEXP demSEXP, SEXP azimuthSEXP, SEXP resolutionSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type dem(demSEXP);
    Rcpp::traits::input_parameter< double >::type azimuth(azimuthSEXP);
    Rcpp::traits::input_parameter< double >::type resolution(resolutionSEXP);
    rcpp_result_gen = Rcpp::wrap(get_dxdy_for_azimuth_cpp(dem, azimuth, resolution));
    return rcpp_result_gen;
END_RCPP
}
// get_shades_for_altitudes_cpp
NumericMatrix get_shades_for_altitudes_cpp(NumericMatrix& altitudes, double minAltitude);
RcppExport SEXP _sunlightRCPP_get_shades_for_altitudes_cpp(SEXP altitudesSEXP, SEXP minAltitudeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type altitudes(altitudesSEXP);
    Rcpp::traits::input_parameter< double >::type minAltitude(minAltitudeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_shades_for_altitudes_cpp(altitudes, minAltitude));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sunlightRCPP_get_altitude_distance_for_azimuth_cpp", (DL_FUNC) &_sunlightRCPP_get_altitude_distance_for_azimuth_cpp, 5},
    {"_sunlightRCPP_get_altitudes_for_azimuth_cpp", (DL_FUNC) &_sunlightRCPP_get_altitudes_for_azimuth_cpp, 5},
    {"_sunlightRCPP_get_dxdy_for_azimuth_cpp", (DL_FUNC) &_sunlightRCPP_get_dxdy_for_azimuth_cpp, 3},
    {"_sunlightRCPP_get_shades_for_altitudes_cpp", (DL_FUNC) &_sunlightRCPP_get_shades_for_altitudes_cpp, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_sunlightRCPP(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
